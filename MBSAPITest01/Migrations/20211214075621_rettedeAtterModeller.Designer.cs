// <auto-generated />
using System;
using MBS_API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MBSAPITest01.Migrations
{
    [DbContext(typeof(MBSContext))]
    [Migration("20211214075621_rettedeAtterModeller")]
    partial class rettedeAtterModeller
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MBStest01.Models.Day", b =>
                {
                    b.Property<int>("DayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InfluenceID")
                        .HasColumnType("int");

                    b.Property<int?>("MoodID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DayID");

                    b.HasIndex("InfluenceID");

                    b.HasIndex("MoodID");

                    b.HasIndex("UserID");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("MBStest01.Models.Influence", b =>
                {
                    b.Property<int>("InfluenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InfluenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InfluenceID");

                    b.ToTable("Influences");
                });

            modelBuilder.Entity("MBStest01.Models.Mood", b =>
                {
                    b.Property<int>("MoodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MoodID");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("MBStest01.Models.Note", b =>
                {
                    b.Property<int>("DayID")
                        .HasColumnType("int");

                    b.Property<string>("NoteString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DayID");

                    b.HasIndex("UserID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MBStest01.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MBStest01.Models.Day", b =>
                {
                    b.HasOne("MBStest01.Models.Influence", "Influence")
                        .WithMany("Days")
                        .HasForeignKey("InfluenceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBStest01.Models.Mood", "Mood")
                        .WithMany()
                        .HasForeignKey("MoodID");

                    b.HasOne("MBStest01.Models.User", "User")
                        .WithMany("Days")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Influence");

                    b.Navigation("Mood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MBStest01.Models.Note", b =>
                {
                    b.HasOne("MBStest01.Models.Day", "Day")
                        .WithOne("Note")
                        .HasForeignKey("MBStest01.Models.Note", "DayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBStest01.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserID");

                    b.Navigation("Day");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MBStest01.Models.Day", b =>
                {
                    b.Navigation("Note");
                });

            modelBuilder.Entity("MBStest01.Models.Influence", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("MBStest01.Models.User", b =>
                {
                    b.Navigation("Days");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
